name: Continuous Delivery for GitHub Pages

on:
  workflow_run:
    workflows: ["CI"]
    branches: [main]
    types: [completed]

jobs:
  cd-gh-pages:
    runs-on: ubuntu-latest
    # We only update the GitHub Pages branch if this is the main repo
    # (not a fork), only if the CI tests were caused by a push (not a
    # pull request), and only if they succeeded.
    if: |
      ${{
        github.repository == 'arclanguage/rainbow-js'
        && github.event.workflow_run.event == 'push'
        && github.event.workflow_run.conclusion == 'success'
      }}
    strategy:
      matrix:
        include:
          # This is the only entry of the matrix for this action.
          - node-version: "16.13.0"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          cache: npm
          node-version: ${{ matrix.node-version }}
      - name: Check the Node.js version
        run: node --version
      - name: Install npm dependencies
        run: npm install
      - name: Clean
        run: npm run clean
      # PORT TODO: Consider adding a linting step.
      - name: Build
        run: npm run build
      - name: Run unit tests
        run: npm test


      # We build the GitHub Pages site based on the `main` branch and
      # deploy that content as a commit to the `gh-pages` branch.

      # This is adapted from
      # <https://github.com/steveklabnik/automatically_update_github_pages_with_travis_example>.

      # First, we build the GitHub Pages content based on the `main`
      # branch. This creates a dist/gh-pages/ directory.
      #
      - name: Build the GitHub Pages site
        run: npm run build-gh-pages

      # We clone the `gh-pages` branch. If it doesn't exist yet, we
      # create a new branch with an empty history. Note that we
      # authenticate using the `GITHUB_TOKEN` secret; this token is
      # provided by GitHub to GitHub Actions workflows.
      #
      - name: Clone the `gh-pages` branch, or create it with an empty history
        run: |
          git clone "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git" build/gh-pages-repo
          cd build/gh-pages-repo
          git checkout gh-pages || git checkout --orphan gh-pages

      # We replace the contents of the working directory with those of
      # the built GitHub Pages site (first making sure that nothing
      # would overwrite the .git/ directory). We stage all the files,
      # including untracked ones.
      #
      # NOTE: The `cp -r path/. path` command syntax is based on:
      #
      #   https://stackoverflow.com/questions/14922562/how-do-i-copy-folder-with-files-to-another-folder-in-unix-linux
      #
      # We could also say `cp -r path/* path`, but it would fail if
      # the source directory were empty.
      #
      - name: Stage a commit to `gh-pages` with the built GitHub Pages site
        run: |
          cd build/gh-pages-repo
          git rm -rf .
          test ! -e build/gh-pages/.git
          cp -r ../../dist/gh-pages/. .
          git add -A .

      # If there are any changes to commit, we make a commit to the
      # `gh-pages` branch that looks a lot like the latest commit to
      # `main`.
      #
      - name: Commit to `gh-pages` in a way that resembles the commit to `main`
        run: |
          cd build/gh-pages-repo
          git config user.name "$(git log -1 --pretty=%an main)"
          git config user.email "$(git log -1 --pretty=%ae main)"
          if [[ ! -z $(git status --untracked-files=no --porcelain) ]]; then
            git commit -m "$(git log -1 --pretty=%B main)"
          fi

      # If there are any commits on our local branch, we push any new
      # ones to the `gh-pages` branch. (This almost always be the
      # commit we just made, if any, but more than that may be pushed
      # if the branch's remote was force-pushed to a prior commit
      # behind our backs.) We specify the remote branch as
      # `refs/heads/gh-pages` so that we create the branch if it
      # doesn't exist yet.
      #
      - name: Push to `gh-pages`, creating the branch if it doesn't exist
        run: |
          cd build/gh-pages-repo
          if [[ ! -z $(git branch --list gh-pages) ]]; then
            git push -q origin HEAD:refs/heads/gh-pages
          fi
